#!/bin/bash

wget https://zenodo.org/api/records/7525740/files-archive -O seq.tar
unzip seq.tar
mkdir -p results

# paramètres
THREADS=8
GENOME_INDEX="./index"
RESULTS_DIR="./results"

mkdir -p fastqc_results trimmed_results ${RESULTS_DIR}

# boucle sur X et Y
for X in 0 7; do
  for Y in 1 2 3; do
    
    PREFIX="Day_${X}_${Y}_chr18.sampled"
    R1="${PREFIX}.R1.fastq.gz"
    R2="${PREFIX}.R2.fastq.gz"

    echo ">>> Traitement de ${PREFIX}"

    # 2. Trimmomatic avec -baseout
    trimmomatic PE "$R1" "$R2" \
      -baseout trimmed_results/${PREFIX}.fastq.gz \
      LEADING:25 TRAILING:25 MINLEN:50

    # Après cette étape, Trimmomatic génère :
    # trimmed_results/${PREFIX}_1P.fastq.gz
    # trimmed_results/${PREFIX}_1U.fastq.gz
    # trimmed_results/${PREFIX}_2P.fastq.gz
    # trimmed_results/${PREFIX}_2U.fastq.gz

    # 3. STAR mapping avec les reads PAIRÉS (1P et 2P)
    STAR --runThreadN ${THREADS} \
      --outFilterMultimapNmax 1 \
      --genomeDir ${GENOME_INDEX} \
      --outSAMattributes All \
      --outSAMtype BAM SortedByCoordinate \
      --outFileNamePrefix ${RESULTS_DIR}/${PREFIX}_ \
      --readFilesIn trimmed_results/${PREFIX}_1P.fastq.gz trimmed_results/${PREFIX}_2P.fastq.gz \
      --readFilesCommand zcat

    # 4. Index du BAM
    samtools sort -@ 8 -o ${RESULTS_DIR}/${PREFIX}_Aligned.sorted.bam \
    ${RESULTS_DIR}/${PREFIX}_Aligned.sortedByCoord.out.bam
    samtools index ${RESULTS_DIR}/${PREFIX}_Aligned.sortedByCoord.out.bam

    echo ">>> ${PREFIX} terminé"
    echo
  done
done

featureCounts -p -t exon -g gene_id -a annotation.gtf -o counts.txt results/*.bam
perl -ne 'print "$1 $2\n" if /gene_id \"(.*?)\".*gene_name \"(.*?)\"/'    annotation.gtf | sort | uniq > gene_id_names.txt
sort counts.txt > temp1
sort gene_id_names.txt > temp2
sort gene_id_names.txt > temp2
join temp1 temp2 |grep "chr18" > temp3
awk -F' ' '
  /chr18/ {                     # ne garder que les lignes contenant "chr18"
    if(!seen[$NF]++) {          # supprimer les doublons basés sur gene_name ($NF)
      printf "%s", $NF;         # afficher le gene_name
      for(i=6;i<=17;i++) {      # parcourir colonnes 6 à 17
        if(i==8 || i==10 || i==12 || i==14 || i==16) continue; # sauter les colonnes que tu ne veux pas
        printf " %s", $i;       # afficher la colonne
      }
      printf "\n"
    }
  }
' temp3 > final_chr18_counts.txt
grep "^CDH2" final_chr18_counts.txt 
